//apply from: './config.gradle'

buildscript {

  ext.kotlin_version = '1.4.20'

  ext.repoPath = rootProject.file('/repos').absolutePath

  ext.usePluginLib = true

  ext.usePlugin = true
  ext.hasPluginLib = rootProject.file('/repos/com/xander/plugin/asm/plugin-library/maven-metadata.xml').exists()
  ext.hasPlugin = rootProject.file('/repos/com/xander/plugin/asm/maven-metadata.xml').exists()
  if (rootProject.ext.usePlugin) {
    ext.isLocalMode = rootProject.ext.hasPluginLib && rootProject.ext.hasPlugin
  } else {
    ext.isLocalMode = false
  }
  ext.isLocalMode = true

  ext.editPluginLib = true // 用来控制 plugin 项目时否依赖本地的项目

  ext.editPlugin = true // 用来控制时否需要用 plugin ，有时候需要发布到本地仓库来验证功能


  repositories {
    maven { url uri("${rootProject.ext.repoPath}") }
    maven { url "https://maven.aliyun.com/repository/jcenter" }
    maven { url "https://maven.aliyun.com/repository/google" }
    google()
    jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:3.6.4'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${rootProject.ext.kotlin_version}"

    classpath 'com.novoda:bintray-release:0.9.2'

    // NOTE: Do not place your application dependencies here; they belong
    // in the individual module build.gradle files
    if (rootProject.ext.isLocalMode) {
      //格式为 --> group:module:version
      classpath "com.xander.plugin:dev-plugin:1.1.0"
    }
  }
}

def isWindows() {
  def os_name = System.properties['os.name'].toString().toLowerCase()
  println "os name: ${os_name}"
  return os_name.contains('window')
}

allprojects {
  repositories {
    maven { url uri("${rootProject.ext.repoPath}") }
    maven { url "https://maven.aliyun.com/repository/jcenter" }
    maven { url "https://maven.aliyun.com/repository/google" }
    google()
    jcenter()
  }
  // add dependency substitution rules
  configurations.all {
    resolutionStrategy.dependencySubstitution {
      // Substitute project and module dependencies
      if (rootProject.ext.editPluginLib) {
        //substitute project(':asm-plugin-library') with module('com.xander.plugin.asm:plugin-library:1.1.0')
        substitute module('com.xander.plugin.asm:plugin-library') with project(':asm-plugin-library')
      }
      // Substitute one module dependency for another
      //substitute module('org.gradle:api:2.0') with module('org.gradle:api:2.1')
    }
  }
}

task clean(type: Delete) {
  delete rootProject.buildDir
}